import { gql } from 'graphql-modules';

export default gql`
  type Query {
    """
    Generate an svg with the provided options
    """
    svg(options: Options): Svg!
  }

  type Svg {
    """
    Data URI of the svg
    """
    data: String!
    """
    URL of the generated svg
    """
    url: String!
  }

  enum FormatType {
    hsvArray
    hslArray
    hsl
    hsla
    rgbArray
    rgb
    rgba
    hex
  }

  enum Type {
    simple
  }

  enum Luminosity {
    bright
    light
    dark
  }

  input Options {
    """
    The dimensions of the svg. Defaults to 20.
    """
    dimension: Float
    """
    The width of the svg. Defaults to dimension if not provided.
    """
    width: Float
    """
    The width of the svg. Defaults to width if not provided.
    """
    height: Float
    """
    The size of each square. Defaults to 20.
    """
    size: Int
    """
    How many colors to use. Defaults to 5.
    """
    count: Int
    """
    Controls the hue of the generated color. You can pass a string representing a color name: red, orange, yellow, green, blue, purple, pink and monochrome are currently supported. If you pass a hexidecimal color string such as #00FFFF, randomColor will extract its hue value and use that to generate colors.
    """
    hue: String
    """
    Controls the luminosity of the generated color. You can specify a string containing bright, light or dark.
    """
    luminosity: Luminosity
    """
    An integer or string which when passed will cause randomColor to return the same color each time.
    """
    seed: ID
    """
    A string which specifies the format of the generated color. Possible values are rgb, rgba, rgbArray, hsl, hsla, hslArray and hex. Defaults to "hex".
    """
    format: FormatType
    """
    A decimal between 0 and 1. Only relevant when using a format with an alpha channel (rgba and hsla). Defaults to a random value.
    """
    alpha: Float
    """
    The width of borders of each square. Defaults to 2. Set to 0 to disable.
    """
    borderWidth: Float
    """
    The color of the borders of each square. Defaults to #fff.
    """
    borderColor: String
    """
    Some combinations of letters and numbers. The cache's hashkey is generated by hashing the entire options object, including the 'id' field. This means that if you change options like colors or size, the hash will change and the svg will be regenerated, even if you pass the same id.
    """
    id: ID

    """
    A short id used to identify the cached svg. If the svg does not exist in the cache, it will be generated and cached with this key.
    """
    key: ID

    """
    A predetermined type of pattern will be generated. Defaults to "simple"
    """
    type: Type

    """
    A list of color hex codes to use. For example, ["7b3357", ""ff00ff", "000000"]
    """
    colors: [String!]
  }
`;
